import logging
import os

from telegram import Update
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    MessageHandler,
    filters,
    ContextTypes,
)

import pdfplumber
import pytesseract
from PIL import Image
from io import BytesIO

from config import API_TOKEN
from analysis import analyze_blood_data
from database import create_tables, save_blood_test, get_user_tests
from chatgpt_client import get_analysis_from_chatgpt_vision

# –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
logging.basicConfig(
    format='[%(levelname)s] %(asctime)s - %(name)s - %(message)s',
    level=logging.INFO
)

async def start_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –∞–Ω–∞–ª–∏–∑–æ–≤ –∫—Ä–æ–≤–∏. –ü—Ä–∏—à–ª–∏—Ç–µ –º–Ω–µ PDF –∏–ª–∏ —Ñ–æ—Ç–æ –∞–Ω–∞–ª–∏–∑–∞, –∏ —è –æ–±—Ä–∞–±–æ—Ç–∞—é –∏—Ö."
    )

async def help_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text(
        "–ü—Ä–∏—à–ª–∏—Ç–µ –¥–æ–∫—É–º–µ–Ω—Ç (PDF) –∏–ª–∏ —Ñ–æ—Ç–æ –∞–Ω–∞–ª–∏–∑–∞ –∫—Ä–æ–≤–∏. –Ø —Ä–∞—Å–ø–æ–∑–Ω–∞—é —Ç–µ–∫—Å—Ç, —Å–æ—Ö—Ä–∞–Ω—é –¥–∞–Ω–Ω—ã–µ –∏ –ø–µ—Ä–µ–¥–∞–º –∏—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞."
    )

async def get_tests_command(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    tests = get_user_tests(user_id)
    if not tests:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω—ã—Ö –∞–Ω–∞–ª–∏–∑–æ–≤.")
        return
    msg = "–í–∞—à–∏ –∞–Ω–∞–ª–∏–∑—ã:\n"
    for t in tests:
        msg += f"ID {t['id']} - {t['timestamp']}:\n{t['test_text'][:100]}...\n\n"
    await update.message.reply_text(msg)

async def chunked_send_text(update: Update, context: ContextTypes.DEFAULT_TYPE, text: str) -> None:
    """
    –î–µ–ª–∏—Ç –¥–ª–∏–Ω–Ω—ã–π —Ç–µ–∫—Å—Ç –Ω–∞ –∫—É—Å–∫–∏ (–Ω–µ –±–æ–ª–µ–µ 4096 —Å–∏–º–≤–æ–ª–æ–≤) –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∏—Ö.
    """
    chunk_size = 4096
    for i in range(0, len(text), chunk_size):
        await context.bot.send_message(
            chat_id=update.effective_chat.id,
            text=text[i : i + chunk_size]
        )

async def handle_document(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ü–æ–ª—É—á–∞–µ–º –¥–æ–∫—É–º–µ–Ω—Ç –¥–ª—è –ø—Ä—è–º–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ ChatGPT Vision
    document = update.message.document
    file_obj = await context.bot.get_file(document.file_id)
    file_bytes = await file_obj.download_as_bytearray()
    file_name = document.file_name
    print(f"–ü–æ–ª—É—á–µ–Ω –¥–æ–∫—É–º–µ–Ω—Ç: {file_name}, —Ä–∞–∑–º–µ—Ä: {len(file_bytes)} –±–∞–π—Ç")
    
    await update.message.reply_text("üîç –ò–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –¥–æ–∫—É–º–µ–Ω—Ç–∞...")
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º ChatGPT Vision
    vision_analysis = get_analysis_from_chatgpt_vision(file_bytes, file_name)
    
    # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ (–Ω–µ –∞–Ω–∞–ª–∏–∑ –∫—Ä–æ–≤–∏), –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ
    if "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–Ω–∞–ª–∏–∑–æ–º –∫—Ä–æ–≤–∏" in vision_analysis:
        await chunked_send_text(update, context, vision_analysis)
        return
    
    # –ï—Å–ª–∏ —ç—Ç–æ –∞–Ω–∞–ª–∏–∑ –∫—Ä–æ–≤–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await update.message.reply_text("‚úÖ –ê–Ω–∞–ª–∏–∑ –∫—Ä–æ–≤–∏ —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ, –∏–¥–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö...")
    
    # Optionally –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –ë–î
    user_id = update.effective_user.id
    # save_blood_test(user_id, vision_analysis)
    
    result_msg = vision_analysis
    await chunked_send_text(update, context, result_msg)

async def handle_photo(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ü–æ–ª—É—á–∞–µ–º —Ñ–æ—Ç–æ –¥–ª—è –ø—Ä—è–º–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ ChatGPT Vision
    photo = update.message.photo[-1]
    file_obj = await context.bot.get_file(photo.file_id)
    file_bytes = await file_obj.download_as_bytearray()
    file_name = "photo.jpg"  # –ú–æ–∂–Ω–æ –∑–∞–¥–∞—Ç—å –∏–º—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    print(f"–ü–æ–ª—É—á–µ–Ω–æ —Ñ–æ—Ç–æ, —Ä–∞–∑–º–µ—Ä: {len(file_bytes)} –±–∞–π—Ç")
    
    await update.message.reply_text("üîç –ò–¥–µ—Ç –ø—Ä–æ–≤–µ—Ä–∫–∞ –∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è...")
    
    # –ü–æ–ª—É—á–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º ChatGPT Vision
    vision_analysis = get_analysis_from_chatgpt_vision(file_bytes, file_name)
    
    # –ï—Å–ª–∏ –ø–æ–ª—É—á–∏–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ (–Ω–µ –∞–Ω–∞–ª–∏–∑ –∫—Ä–æ–≤–∏), –ø—Ä–æ—Å—Ç–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –µ–≥–æ
    if "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –∞–Ω–∞–ª–∏–∑–æ–º –∫—Ä–æ–≤–∏" in vision_analysis:
        await chunked_send_text(update, context, vision_analysis)
        return
    
    # –ï—Å–ª–∏ —ç—Ç–æ –∞–Ω–∞–ª–∏–∑ –∫—Ä–æ–≤–∏, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ–º–µ–∂—É—Ç–æ—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await update.message.reply_text("‚úÖ –ê–Ω–∞–ª–∏–∑ –∫—Ä–æ–≤–∏ —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥–æ–∂–¥–∏—Ç–µ, –∏–¥–µ—Ç –ø–æ–¥—Ä–æ–±–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –¥–∞–Ω–Ω—ã—Ö...")
    
    user_id = update.effective_user.id
    # Optionally –º–æ–∂–Ω–æ —Å–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ –ë–î
    
    result_msg = vision_analysis
    await chunked_send_text(update, context, result_msg)

def main():
    # –°–æ–∑–¥–∞—ë–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–±–ª–∏—Ü—ã
    create_tables()

    app = ApplicationBuilder().token(API_TOKEN).build()

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    app.add_handler(CommandHandler("start", start_command))
    app.add_handler(CommandHandler("help", help_command))
    app.add_handler(CommandHandler("get_tests", get_tests_command))
    app.add_handler(MessageHandler(filters.Document.ALL, handle_document))
    app.add_handler(MessageHandler(filters.PHOTO, handle_photo))

    # –ò—Å–ø–æ–ª—å–∑—É–µ–º webhook-—Ä–µ–∂–∏–º –¥–ª—è —Ä–∞–±–æ—Ç—ã –Ω–∞ Railway
    port = int(os.environ.get("PORT", 8080))
    WEBHOOK_URL = os.environ.get("WEBHOOK_URL")
    if not WEBHOOK_URL:
        raise ValueError("WEBHOOK_URL –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    webhook_url = f"{WEBHOOK_URL}/{API_TOKEN}"

    app.run_webhook(
         listen="0.0.0.0",
         port=port,
         url_path=API_TOKEN,
         webhook_url=webhook_url
    )

if __name__ == "__main__":
    main() 